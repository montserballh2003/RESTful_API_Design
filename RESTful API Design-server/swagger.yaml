openapi: 3.0.0
info:
  title: Public Library API
  description: API for managing books and authors in a public library.
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/MNTSERHARFOUSH456/DesignAPI/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://api.example.com/v1
paths:
  /books:
    get:
      summary: List all books
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
        required: true
      responses:
        "201":
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        "400":
          description: Invalid request payload
        "500":
          description: Internal server error
  /books/{bookId}:
    get:
      summary: Get a specific book by ID
      parameters:
      - name: bookId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        "404":
          description: Book not found
        "500":
          description: Internal server error
    put:
      summary: Update a book
      parameters:
      - name: bookId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
        required: true
      responses:
        "200":
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        "400":
          description: Invalid request payload
        "404":
          description: Book not found
        "500":
          description: Internal server error
    delete:
      summary: Delete a book
      parameters:
      - name: bookId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: Book deleted successfully
        "404":
          description: Book not found
        "500":
          description: Internal server error
  /books/author/{authorId}:
    get:
      summary: List books by author
      parameters:
      - name: authorId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        "404":
          description: Author not found
        "500":
          description: Internal server error
  /authors:
    get:
      summary: List all authors
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Add a new author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
        required: true
      responses:
        "201":
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        "400":
          description: Invalid request payload
        "500":
          description: Internal server error
  /authors/{authorId}:
    get:
      summary: Get a specific author by ID
      parameters:
      - name: authorId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        "404":
          description: Author not found
        "500":
          description: Internal server error
    put:
      summary: Update an author
      parameters:
      - name: authorId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
        required: true
      responses:
        "200":
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        "400":
          description: Invalid request payload
        "404":
          description: Author not found
        "500":
          description: Internal server error
    delete:
      summary: Delete an author
      parameters:
      - name: authorId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: Author deleted successfully
        "404":
          description: Author not found
        "500":
          description: Internal server error
  /authors/book/{bookId}:
    get:
      summary: List authors by book
      parameters:
      - name: bookId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        "404":
          description: Book not found
        "500":
          description: Internal server error
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        subtitle:
          type: string
        description:
          type: string
        imageURL:
          type: string
          format: uri
        edition:
          type: string
        publishingDate:
          type: string
          format: date
        authors:
          type: array
          items:
            $ref: '#/components/schemas/AuthorSummary'
        categories:
          type: array
          items:
            type: string
    BookRequest:
      type: object
      properties:
        title:
          type: string
        subtitle:
          type: string
        description:
          type: string
        imageURL:
          type: string
          format: uri
        edition:
          type: string
        publishingDate:
          type: string
          format: date
        authors:
          type: array
          items:
            type: integer
        categories:
          type: array
          items:
            type: string
    Author:
      type: object
      properties:
        id:
          type: integer
        fullName:
          type: string
        title:
          type: string
        dob:
          type: string
          format: date
        bio:
          type: string
    AuthorRequest:
      type: object
      properties:
        fullName:
          type: string
        title:
          type: string
        dob:
          type: string
          format: date
        bio:
          type: string
    AuthorSummary:
      type: object
      properties:
        id:
          type: integer
        fullName:
          type: string
